import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { motion } from "framer-motion";
import { Flame } from "lucide-react";

export default function Home() {
  const [step, setStep] = useState("home");
  const [quizCode, setQuizCode] = useState("");
  const [questions, setQuestions] = useState([]);
  const [savedQuizzes, setSavedQuizzes] = useState([]);
  const [selectedQuiz, setSelectedQuiz] = useState(null);
  const [currentQuestion, setCurrentQuestion] = useState({
    question: "",
    options: ["", "", "", ""],
    correctIndex: 0,
    media: null,
    mediaType: null,
  });
  const [quizCount, setQuizCount] = useState(0);
  const [isPaid, setIsPaid] = useState(false);
  const [isAdmin, setIsAdmin] = useState(false);

  const leaderboard = [
    { name: "–õ–∏—Å–∞123", score: 150 },
    { name: "–û–≥–æ–Ω—ë–∫", score: 120 },
    { name: "SmartFox", score: 100 },
  ];

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get("admin") === "1") {
      setIsAdmin(true);
      setIsPaid(true);
    }
  }, []);

  const handleJoinGame = () => {
    if (quizCode.trim()) {
      alert(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ —Å –∫–æ–¥–æ–º: ${quizCode}`);
    }
  };

  const handleAddQuestion = () => {
    if (!isPaid && questions.length >= 10) {
      alert("–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 10 –≤–æ–ø—Ä–æ—Å–æ–≤.");
      return;
    }
    setQuestions([...questions, currentQuestion]);
    setCurrentQuestion({ question: "", options: ["", "", "", ""], correctIndex: 0, media: null, mediaType: null });
  };

  const handleFinishCreation = () => {
    if (!isPaid && quizCount >= 2) {
      alert("–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ ‚Äî –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø.");
      return;
    }
    const quizId = Math.floor(100000 + Math.random() * 900000).toString();
    const newQuiz = {
      id: quizId,
      questions,
      createdAt: new Date().toLocaleString(),
    };
    setSavedQuizzes([...savedQuizzes, newQuiz]);
    alert(`–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥: ${quizId}`);
    setQuizCount(quizCount + 1);
    setQuestions([]);
    setStep("home");
  };

  const handleSelectQuiz = (quiz) => {
    setSelectedQuiz(quiz);
    setStep("playSaved");
  };

  return (
    <main className="min-h-screen bg-gradient-to-br from-pink-600 to-purple-800 text-white p-6 flex flex-col items-center justify-center">
      <motion.div className="flex flex-col items-center gap-3 mb-4" initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 1 }}>
        <h1 className="text-4xl font-extrabold tracking-wide"></h1>
      </motion.div>

      {step === "home" && (
        <>
          <motion.h1 className="text-5xl font-bold mb-6 text-center" initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.8 }}>
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QuizRush!
          </motion.h1>

          <motion.p className="text-xl text-center max-w-xl mb-10" initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.5, duration: 1 }}>
            –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –≤–µ—Å—ë–ª—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∏–≥—Ä—ã!
            –ë—ã—Å—Ç—Ä–æ. –õ–µ–≥–∫–æ. –£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ.
          </motion.p>

          <div className="flex gap-6 flex-wrap justify-center">
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Button className="text-lg px-6 py-3 rounded-2xl shadow-lg" onClick={() => setStep("join")}>–ò–≥—Ä–∞—Ç—å</Button>
            </motion.div>

            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Button className="text-lg px-6 py-3 rounded-2xl shadow-lg" variant="secondary" onClick={() => setStep("create")}>–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É</Button>
            </motion.div>

            {savedQuizzes.length > 0 && (
              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                <Button className="text-lg px-6 py-3 rounded-2xl shadow-lg" variant="outline" onClick={() => setStep("saved")}>–ú–æ–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã</Button>
              </motion.div>
            )}
          </div>

          <motion.div className="mt-16 max-w-2xl" initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 1.2 }}>
            <Card className="bg-white bg-opacity-10 border-white border-opacity-20 rounded-2xl shadow-xl">
              <CardContent className="p-6 text-center">
                <p className="text-white text-sm">
                  –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å 2 –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (–¥–æ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥–∞—è). <br />
                  –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ? –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–º –ø–æ—Å–ª–µ –±—ã—Å—Ç—Ä–æ–π –æ–ø–ª–∞—Ç—ã. <br />
                  <span className="font-semibold">QuizRush</span> ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –≥–¥–µ –≤–µ—Å–µ–ª–æ —É—á–∏—Ç—å—Å—è –∏ –∏–≥—Ä–∞—Ç—å!
                </p>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div className="mt-12 w-full max-w-md text-center" initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 1.6 }}>
            <h2 className="text-2xl font-bold mb-4">üî• –î–æ—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤</h2>
            <div className="bg-white bg-opacity-20 rounded-xl p-4 space-y-2 shadow-lg">
              {leaderboard.map((user, index) => (
                <motion.div key={index} className="flex justify-between px-4 py-2 rounded-lg bg-gradient-to-r from-orange-400 to-red-500 text-white font-semibold shadow-md" whileHover={{ scale: 1.02 }}>
                  <span>{user.name}</span>
                  <span>{user.score} –æ—á–∫–æ–≤</span>
                </motion.div>
              ))}
            </div>
          </motion.div>
        </>
      )}

      {step === "saved" && (
        <motion.div className="w-full max-w-xl text-center" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
          <h2 className="text-3xl font-bold mb-6">–ú–æ–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã</h2>
          {savedQuizzes.map((quiz, idx) => (
            <div key={idx} className="bg-white bg-opacity-20 rounded-xl p-4 mb-4">
              <p className="text-white text-lg font-semibold mb-2">–ö–æ–¥: {quiz.id}</p>
              <p className="text-white text-sm mb-2">–°–æ–∑–¥–∞–Ω–∞: {quiz.createdAt}</p>
              <Button onClick={() => handleSelectQuiz(quiz)}>–ò–≥—Ä–∞—Ç—å</Button>
            </div>
          ))}
          <Button variant="ghost" className="mt-4" onClick={() => setStep("home")}>–ù–∞–∑–∞–¥</Button>
        </motion.div>
      )}

      {step === "playSaved" && selectedQuiz && (
        <motion.div className="w-full max-w-2xl" initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5 }}>
          <h2 className="text-3xl font-bold mb-6 text-center">–í–∏–∫—Ç–æ—Ä–∏–Ω–∞: {selectedQuiz.id}</h2>
          {selectedQuiz.questions.map((q, idx) => (
            <div key={idx} className="mb-6 p-4 rounded-xl bg-white bg-opacity-10">
              <p className="text-white font-semibold">–í–æ–ø—Ä–æ—Å {idx + 1}: {q.question}</p>
              <ul className="mt-2 space-y-1">
                {q.options.map((opt, i) => (
                  <li key={i} className={`text-white ${i === q.correctIndex ? 'font-bold' : ''}`}>‚Äî {opt}</li>
                ))}
              </ul>
            </div>
          ))}
          <Button variant="ghost" className="mt-4" onClick={() => setStep("home")}>–ù–∞–∑–∞–¥</Button>
        </motion.div>
      )}

      {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏: join, create –∏ —Ç.–¥. */}

      {step === "join" && (
        <motion.div className="w-full max-w-md text-center" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
          <h2 className="text-3xl font-bold mb-4">–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã</h2>
          <input type="text" value={quizCode} onChange={(e) => setQuizCode(e.target.value)} className="w-full p-3 rounded-lg text-black text-lg mb-4" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 123456" />
          <Button className="w-full text-lg py-3" onClick={handleJoinGame}>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</Button>
          <div className="mt-4">
            <button onClick={() => setStep("home") } className="text-sm underline text-white opacity-70 hover:opacity-100">–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é</button>
          </div>
        </motion.div>
      )}

      {step === "create" && (
        <motion.div className="w-full max-w-2xl" initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5 }}>
          <h2 className="text-3xl font-bold mb-6 text-center">–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã</h2>
          <div className="bg-white bg-opacity-10 p-6 rounded-xl space-y-4">
            <input type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å" value={currentQuestion.question} onChange={(e) => setCurrentQuestion({ ...currentQuestion, question: e.target.value })} className="w-full p-3 rounded text-black" />
            <div>
              <label className="block text-white text-sm mb-2">–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–¥–∏–∞:</label>
              <input type="file" accept="image/*,audio/*,video/*" onChange={(e) => {
                const file = e.target.files[0];
                const type = file?.type.startsWith("image") ? "image" : file?.type.startsWith("video") ? "video" : "audio";
                setCurrentQuestion({ ...currentQuestion, media: file, mediaType: type });
              }} className="text-white text-sm" />
            </div>
            {currentQuestion.options.map((option, idx) => (
              <input key={idx} type="text" placeholder={`–í–∞—Ä–∏–∞–Ω—Ç ${idx + 1}`} value={option} onChange={(e) => {
                const updatedOptions = [...currentQuestion.options];
                updatedOptions[idx] = e.target.value;
                setCurrentQuestion({ ...currentQuestion, options: updatedOptions });
              }} className="w-full p-2 rounded text-black" />
            ))}
            <div className="text-white text-sm">
              <label>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: </label>
              <select value={currentQuestion.correctIndex} onChange={(e) => setCurrentQuestion({ ...currentQuestion, correctIndex: parseInt(e.target.value) })} className="ml-2 text-black rounded p-1">
                {[0, 1, 2, 3].map((i) => (<option key={i} value={i}>{`–í–∞—Ä–∏–∞–Ω—Ç ${i + 1}`}</option>))}
              </select>
            </div>
            <div className="flex gap-4 mt-4">
              <Button onClick={handleAddQuestion}>–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å</Button>
              <Button variant="secondary" onClick={handleFinishCreation}>–ó–∞–≤–µ—Ä—à–∏—Ç—å</Button>
              <Button variant="ghost" onClick={() => setStep("home")}>–û—Ç–º–µ–Ω–∞</Button>
            </div>
            {!isPaid && <div className="text-xs text-white mt-4 opacity-80">–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 10 –≤–æ–ø—Ä–æ—Å–æ–≤.</div>}
          </div>
        </motion.div>
      )}
    </main>
  );
}
